services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile-frontend
    ports:
      - "8080:80"
    depends_on:
      - backend
    profiles: ["prod"]

  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile-frontend.dev
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - backend-dev
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - VITE_BACKEND_URL=http://localhost:5001
    profiles: ["dev"]

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile-backend
    ports:
      - "5000:5000"
    #set PASSWORD and JWT_SeCRET
    environment:
      - DB_NAME=mavericks_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres_password
      - DB_HOST=db
      - JWT_SECRET=supersecurejwtsecret
      - NODE_ENV=production
      - PORT=5000
    depends_on:
      db:
        condition: service_healthy
    profiles: ["prod"]

  backend-dev:
    build:
      context: ./server
      dockerfile: Dockerfile-backend.dev
    ports:
      - "5001:5001"
    volumes:
      - ./server:/usr/src/app
      - /usr/src/app/node_modules
    #set PASSWORD and JWT_SeCRET
    environment:
      - DB_NAME=mavericks_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres_password
      - DB_HOST=db
      - DB_PORT=5432
      - JWT_SECRET=supersecurejwtsecret
      - NODE_ENV=development
      - PORT=5001
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    depends_on:
      db:
        condition: service_healthy
    profiles: ["dev"]

  #set PASSWORD
  db:
    image: postgres:14
    environment:
      POSTGRES_DB: mavericks_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./Database.sql:/docker-entrypoint-initdb.d/Database.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  pgdata:
